let User,jwt;_087‍.x([["signUp",()=>signUp],["signIn",()=>signIn]]);_087‍.w("../models/User",[["default",["User"],function(v){User=v}]]);_087‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);


//Register

       const signUp = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });

    if (existingUser) {
      return res.status(400).json({ message: "User already exists" });
    }

    const result = await User.create({
      username,
      email,
      password,
    });

    res.status(201).json(result);
  } catch (err) {
    res.status(500).json(err);
  }
};

//LogIn

       const signIn = async (req, res) => {
  const { email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });

    if (!existingUser) {
      return res.status(404).json({ message: "User doesnot exist" });
    }

    if (existingUser.password !== password) {
      return res.status(400).json({ message: "Invalid credentials" });
    }
    const token = jwt.sign({ email: existingUser.email }, "shhhh", {
      expiresIn: "1h",
    });

    res.status(200).json({ result: existingUser, token });
  } catch (err) {
    res.status(500).json(err);
  }
};
